//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class DefaultAPI: APIBase {
    /**
     updates (or creates) an attribute
     
     - parameter value: (body) The value to update the key with. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addAttribute(value: String? = nil, completion: @escaping ((_ data: InlineResponse2004?,_ error: Error?) -> Void)) {
        addAttributeWithRequestBuilder(value: value).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     updates (or creates) an attribute
     - POST /{uuid}/attribute/{key}
     - Works with all entities, including nodes and edges. Given its key, updates an  attribute value, or creates it, if it doesn't yet exist. 
     - examples: [{contentType=application/json, example={
  "success" : true
}}]
     
     - parameter value: (body) The value to update the key with. (optional)

     - returns: RequestBuilder<InlineResponse2004> 
     */
    open class func addAttributeWithRequestBuilder(value: String? = nil) -> RequestBuilder<InlineResponse2004> {
        let path = "/{uuid}/attribute/{key}"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = value?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2004>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     deletes an attribute
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delAttribute(completion: @escaping ((_ data: InlineResponse2004?,_ error: Error?) -> Void)) {
        delAttributeWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     deletes an attribute
     - DELETE /{uuid}/attribute/{key}
     - Works with all entities, including nodes and edges. Given its key, deletes an  attribute. 
     - examples: [{contentType=application/json, example={
  "success" : true
}}]

     - returns: RequestBuilder<InlineResponse2004> 
     */
    open class func delAttributeWithRequestBuilder() -> RequestBuilder<InlineResponse2004> {
        let path = "/{uuid}/attribute/{key}"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2004>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     deletes an entity
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delEntity(completion: @escaping ((_ error: Error?) -> Void)) {
        delEntityWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     deletes an entity
     - DELETE /{uuid}
     - Works with all entities, including nodes and edges.  

     - returns: RequestBuilder<Void> 
     */
    open class func delEntityWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/{uuid}"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     retrieves the edges of a node
     
     - parameter uuid: (path) The node ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllEdges(uuid: String, completion: @escaping ((_ data: InlineResponse2003?,_ error: Error?) -> Void)) {
        getAllEdgesWithRequestBuilder(uuid: uuid).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     retrieves the edges of a node
     - GET /{uuid}/edges/all
     - By passing in a node ID, you can fetch all the edges of the node in question; including incoming and outgoing. 
     - examples: [{contentType=application/json, example={
  "in" : [ {
    "5f9e769ff6fe4cee02b3b4547200db6b" : ""
  } ],
  "from" : [ {
    "classes" : [ "PhoNetworksAutogenerated\\UserOut\\Post", "Pho\\Kernel\\Foundation\\ActorOut\\Write", "Pho\\Framework\\ActorOut\\Write", "Pho\\Framework\\ActorOut\\Subscribe", "Pho\\Framework\\AbstractEdge", "Pho\\Lib\\Graph\\Edge" ],
    "id" : "8b79d958f3bb5b625808f490a3ec0ed6"
  } ],
  "to" : [ "" ],
  "out" : [ "" ]
}}]
     
     - parameter uuid: (path) The node ID 

     - returns: RequestBuilder<InlineResponse2003> 
     */
    open class func getAllEdgesWithRequestBuilder(uuid: String) -> RequestBuilder<InlineResponse2003> {
        var path = "/{uuid}/edges/all"
        path = path.replacingOccurrences(of: "{uuid}", with: "\(uuid)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2003>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     retrieves the value of an entity attribute
     
     - parameter uuid: (path) The node ID 
     - parameter key: (path) The attribute key 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAttribute(uuid: String, key: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getAttributeWithRequestBuilder(uuid: uuid, key: key).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     retrieves the value of an entity attribute
     - GET /{uuid}/attribute/{key}
     - Attribute key must be case-sensitive. 
     - examples: [{contentType=application/json, example="This is new tweet"}]
     
     - parameter uuid: (path) The node ID 
     - parameter key: (path) The attribute key 

     - returns: RequestBuilder<String> 
     */
    open class func getAttributeWithRequestBuilder(uuid: String, key: String) -> RequestBuilder<String> {
        var path = "/{uuid}/attribute/{key}"
        path = path.replacingOccurrences(of: "{uuid}", with: "\(uuid)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{key}", with: "\(key)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     retrieves the existing attribute keys of an entity (edge or node)
     
     - parameter uuid: (path) The node ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAttributes(uuid: String, completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        getAttributesWithRequestBuilder(uuid: uuid).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     retrieves the existing attribute keys of an entity (edge or node)
     - GET /{uuid}/attributes
     - Attribute keys are case-sensitive, and they will be listed in an array. 
     - examples: [{contentType=application/json, example=[ "Status", "CreateTime" ]}]
     
     - parameter uuid: (path) The node ID 

     - returns: RequestBuilder<[String]> 
     */
    open class func getAttributesWithRequestBuilder(uuid: String) -> RequestBuilder<[String]> {
        var path = "/{uuid}/attributes"
        path = path.replacingOccurrences(of: "{uuid}", with: "\(uuid)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[String]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     retrieves an edge
     
     - parameter uuid: (path) The edge ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEdge(uuid: String, completion: @escaping ((_ data: Edge?,_ error: Error?) -> Void)) {
        getEdgeWithRequestBuilder(uuid: uuid).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     retrieves an edge
     - GET /edge/{uuid}
     - By passing in an ID, you can search for available edges in the system.  
     - examples: [{contentType=application/json, example={
  "head" : "5f3246a92bef76fd58485e72dea7d9b7",
  "tail" : "49ad16d29900f22e021467b46707130e",
  "id" : "8b79d958f3bb5b625808f490a3ec0ed6",
  "class" : "PhoNetworksAutogenerated\\UserOut\\Post"
}}]
     
     - parameter uuid: (path) The edge ID 

     - returns: RequestBuilder<Edge> 
     */
    open class func getEdgeWithRequestBuilder(uuid: String) -> RequestBuilder<Edge> {
        var path = "/edge/{uuid}"
        path = path.replacingOccurrences(of: "{uuid}", with: "\(uuid)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Edge>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     retrieves the edge getter methods of a node
     
     - parameter uuid: (path) The node ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEdgeGetters(uuid: String, completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        getEdgeGettersWithRequestBuilder(uuid: uuid).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     retrieves the edge getter methods of a node
     - GET /{uuid}/edges/getters
     - By passing in a node UUID that exists in the database, you can fetch  the edge getter methods of the node in question. 
     - examples: [{contentType=application/json, example=[ "followers", "notifications", "follows", "likes", "posts" ]}]
     
     - parameter uuid: (path) The node ID 

     - returns: RequestBuilder<[String]> 
     */
    open class func getEdgeGettersWithRequestBuilder(uuid: String) -> RequestBuilder<[String]> {
        var path = "/{uuid}/edges/getters"
        path = path.replacingOccurrences(of: "{uuid}", with: "\(uuid)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[String]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     retrieves the edge setter methods of a node
     
     - parameter uuid: (path) The node ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEdgeSetters(uuid: String, completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        getEdgeSettersWithRequestBuilder(uuid: uuid).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     retrieves the edge setter methods of a node
     - GET /{uuid}/edges/setters
     - By passing in a node UUID that exists in the database, you can fetch  the edge setter methods of the node in question. These setters may or  may not be formative. If they are formative, a new node is created in result. 
     - examples: [{contentType=application/json, example=[ "consume", "follow", "like", "post" ]}]
     
     - parameter uuid: (path) The node ID 

     - returns: RequestBuilder<[String]> 
     */
    open class func getEdgeSettersWithRequestBuilder(uuid: String) -> RequestBuilder<[String]> {
        var path = "/{uuid}/edges/setters"
        path = path.replacingOccurrences(of: "{uuid}", with: "\(uuid)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[String]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     retrieves the Graph Founder
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFounder(completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        getFounderWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     retrieves the Graph Founder
     - GET /founder
     - The Founder must be a \\Pho\\Framework\\Actor object.  This method returns the object type as well as object ID. 
     - examples: [{contentType=application/json, example={
  "id" : "49fcc36403b8d5594a95250e88dfd56a",
  "class" : "PhoNetworksAutogenerated\\User"
}}]

     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func getFounderWithRequestBuilder() -> RequestBuilder<InlineResponse200> {
        let path = "/founder"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     retrieves the main Graph
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGraph(completion: @escaping ((_ data: InlineResponse2001?,_ error: Error?) -> Void)) {
        getGraphWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     retrieves the main Graph
     - GET /graph
     - The Graph must be a \\Pho\\Lib\\Graph\\SubGraph and \\Pho\\Framework\\Graph object.  This method returns the object type as well as object ID. The Graph contains all nodes and edges in the system.  Though it is contained by Space, its one and only container. 
     - examples: [{contentType=application/json, example={
  "id" : "3aba8264bd147746d39860cef332363b",
  "class" : "PhoNetworksAutogenerated\\Graph"
}}]

     - returns: RequestBuilder<InlineResponse2001> 
     */
    open class func getGraphWithRequestBuilder() -> RequestBuilder<InlineResponse2001> {
        let path = "/graph"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2001>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     retrieves the incoming edges of a node
     
     - parameter uuid: (path) the node ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIncomingEdges(uuid: String, completion: @escaping ((_ data: [NodeEdge]?,_ error: Error?) -> Void)) {
        getIncomingEdgesWithRequestBuilder(uuid: uuid).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     retrieves the incoming edges of a node
     - GET /{uuid}/edges/in
     - By passing in a node ID, you can fetch  the incoming edges of the node in question. 
     - examples: [{contentType=application/json, example=[ {
  "classes" : [ "PhoNetworksAutogenerated\\UserOut\\Post", "Pho\\Kernel\\Foundation\\ActorOut\\Write", "Pho\\Framework\\ActorOut\\Write", "Pho\\Framework\\ActorOut\\Subscribe", "Pho\\Framework\\AbstractEdge", "Pho\\Lib\\Graph\\Edge" ],
  "id" : "8b79d958f3bb5b625808f490a3ec0ed6"
} ]}]
     
     - parameter uuid: (path) the node ID 

     - returns: RequestBuilder<[NodeEdge]> 
     */
    open class func getIncomingEdgesWithRequestBuilder(uuid: String) -> RequestBuilder<[NodeEdge]> {
        var path = "/{uuid}/edges/in"
        path = path.replacingOccurrences(of: "{uuid}", with: "\(uuid)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[NodeEdge]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     retrieves a node
     
     - parameter uuid: (path) The node ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getNode(uuid: String, completion: @escaping ((_ data: Node?,_ error: Error?) -> Void)) {
        getNodeWithRequestBuilder(uuid: uuid).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     retrieves a node
     - GET /{uuid}
     - By passing in an ID, you can search for available nodes in the system. Please note, this function will not return edges. This method  is  reserved for nodes only.  
     - examples: [{contentType=application/json, example={
  "creator" : "49ad16d29900f22e021467b46707130e",
  "context" : "36544668db4ac1a35ca32bffdd056184",
  "id" : "5f3246a92bef76fd58485e72dea7d9b7",
  "class" : "PhoNetworksAutogenerated\\Status"
}}]
     
     - parameter uuid: (path) The node ID 

     - returns: RequestBuilder<Node> 
     */
    open class func getNodeWithRequestBuilder(uuid: String) -> RequestBuilder<Node> {
        var path = "/{uuid}"
        path = path.replacingOccurrences(of: "{uuid}", with: "\(uuid)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Node>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     edge getter
     
     - parameter uuid: (path) The node ID 
     - parameter edge: (path) The edge getter label 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getNodeEdge(uuid: String, edge: String, completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        getNodeEdgeWithRequestBuilder(uuid: uuid, edge: edge).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     edge getter
     - GET /{uuid}/{edge}
     - Fetches edge results, whether as edge IDs or node IDs, depending on edge's characteristics.  
     - examples: [{contentType=application/json, example=[ "507dfe57b69c16661d37914952a55129" ]}]
     
     - parameter uuid: (path) The node ID 
     - parameter edge: (path) The edge getter label 

     - returns: RequestBuilder<[String]> 
     */
    open class func getNodeEdgeWithRequestBuilder(uuid: String, edge: String) -> RequestBuilder<[String]> {
        var path = "/{uuid}/{edge}"
        path = path.replacingOccurrences(of: "{uuid}", with: "\(uuid)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{edge}", with: "\(edge)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[String]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     retrieves the outgoing edges of a node
     
     - parameter uuid: (path) the node ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutgoingEdges(uuid: String, completion: @escaping ((_ data: [NodeEdge]?,_ error: Error?) -> Void)) {
        getOutgoingEdgesWithRequestBuilder(uuid: uuid).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     retrieves the outgoing edges of a node
     - GET /{uuid}/edges/out
     - By passing in a node ID, you can fetch  the outgoing edges of the node in question. 
     - examples: [{contentType=application/json, example=[ {
  "classes" : [ "PhoNetworksAutogenerated\\UserOut\\Post", "Pho\\Kernel\\Foundation\\ActorOut\\Write", "Pho\\Framework\\ActorOut\\Write", "Pho\\Framework\\ActorOut\\Subscribe", "Pho\\Framework\\AbstractEdge", "Pho\\Lib\\Graph\\Edge" ],
  "id" : "8b79d958f3bb5b625808f490a3ec0ed6"
} ]}]
     
     - parameter uuid: (path) the node ID 

     - returns: RequestBuilder<[NodeEdge]> 
     */
    open class func getOutgoingEdgesWithRequestBuilder(uuid: String) -> RequestBuilder<[NodeEdge]> {
        var path = "/{uuid}/edges/out"
        path = path.replacingOccurrences(of: "{uuid}", with: "\(uuid)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[NodeEdge]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     retrieves the Space
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSpace(completion: @escaping ((_ data: InlineResponse2002?,_ error: Error?) -> Void)) {
        getSpaceWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     retrieves the Space
     - GET /space
     - The Space must be a \\Pho\\Lib\\Graph\\Graph object.  This method returns the object type as well as object uuid. Space always comes with the nil ID;  00000000000000000000000000000000, and under normal circumstances its class is always Pho\\Kernel\\Standards\\Space 
     - examples: [{contentType=application/json, example={
  "id" : "00000000000000000000000000000000",
  "class" : "Pho\\Kernel\\Standards\\Space"
}}]

     - returns: RequestBuilder<InlineResponse2002> 
     */
    open class func getSpaceWithRequestBuilder() -> RequestBuilder<InlineResponse2002> {
        let path = "/space"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     fetches entity type
     
     - parameter uuid: (path) the node 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getType(uuid: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getTypeWithRequestBuilder(uuid: uuid).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     fetches entity type
     - GET /{uuid}/type
     - Possible values are; \"Space\", \"Node\", \"Graph Node\", \"Graph\", \"Actor Node\" \"Object Node\", \"Edge\", \"Read Edge\", \"Write Edge\", \"Subscribe Edge\", \"Mention Edge\", \"Unidentified\". 
     - examples: [{contentType=application/json, example="Mention Edge"}]
     
     - parameter uuid: (path) the node 

     - returns: RequestBuilder<String> 
     */
    open class func getTypeWithRequestBuilder(uuid: String) -> RequestBuilder<String> {
        var path = "/{uuid}/type"
        path = path.replacingOccurrences(of: "{uuid}", with: "\(uuid)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     creates an Actor object
     
     - parameter param1: (body) Actor constructor argument. More parameters may be passed via param2, param3 ... param50.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func makeActor(param1: String? = nil, completion: @escaping ((_ data: UUID?,_ error: Error?) -> Void)) {
        makeActorWithRequestBuilder(param1: param1).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     creates an Actor object
     - POST /actor
     - Fetches whatever set as \"default_object\"=>\"actor\" while determining what Actor object to construct. If it doesn't exist, uses \"default_object\"=>\"founder\" class. Otherwise fails. 
     - examples: [{contentType=application/json, example="4f9e769ff6fe4cee02b3b4547200db6b"}]
     
     - parameter param1: (body) Actor constructor argument. More parameters may be passed via param2, param3 ... param50.  (optional)

     - returns: RequestBuilder<UUID> 
     */
    open class func makeActorWithRequestBuilder(param1: String? = nil) -> RequestBuilder<UUID> {
        let path = "/actor"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = param1?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<UUID>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     creates an edge
     
     - parameter param1: (body) The value to update the key with. There can be 50 of those. For example;  param1&#x3D;\&quot;value1\&quot;, param2 &#x3D;\&quot;another value\&quot; depending on the edge&#39;s default constructor variable count.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func makeEdge(param1: String? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        makeEdgeWithRequestBuilder(param1: param1).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     creates an edge
     - POST /{uuid}/{edge}
     - Used to set new edges. If the edge is formative, then a node is also formed. 
     - examples: [{contentType=application/json, example="5b44b304ab56d70ff5f48fd461db7669"}]
     
     - parameter param1: (body) The value to update the key with. There can be 50 of those. For example;  param1&#x3D;\&quot;value1\&quot;, param2 &#x3D;\&quot;another value\&quot; depending on the edge&#39;s default constructor variable count.  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func makeEdgeWithRequestBuilder(param1: String? = nil) -> RequestBuilder<String> {
        let path = "/{uuid}/{edge}"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = param1?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     updates (or creates) an attribute
     
     - parameter value: (body) The value to update the key with. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setAttribute(value: String? = nil, completion: @escaping ((_ data: InlineResponse2004?,_ error: Error?) -> Void)) {
        setAttributeWithRequestBuilder(value: value).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     updates (or creates) an attribute
     - PUT /{uuid}/attribute/{key}
     - Works with all entities, including nodes and edges. Given its key, updates an  attribute value, or creates it, if it doesn't yet exist. 
     - examples: [{contentType=application/json, example={
  "success" : true
}}]
     
     - parameter value: (body) The value to update the key with. (optional)

     - returns: RequestBuilder<InlineResponse2004> 
     */
    open class func setAttributeWithRequestBuilder(value: String? = nil) -> RequestBuilder<InlineResponse2004> {
        let path = "/{uuid}/attribute/{key}"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = value?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2004>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
